Comandos SQL

Para criar um esquema (base de dados):
CREATE SCHEMA escola_curso; 
No caso esse comando irá criar um esquema com o nome de escola_curso

Para deletar um esquema:
DROP SCHEMA escola_curso;

Para criar uma tabela dentro de um esquema:
CREATE TABLE `escola_curso`.`alunos` (
  `id_aluno` INT NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id_aluno`));
Nesse exemplo será criada uma tabela chamada alunos no DB escola_curso, possuindo apenas uma coluna chamada id_aluno e esta sendo Inteira, não nula e auto-incremental e também será usada como primary key (identificador de registros).

Para alterar uma tabela já existente e adicionar colunas nela:
ALTER TABLE `escola_curso`.`alunos` 
ADD COLUMN `nome` VARCHAR(100) NOT NULL AFTER `id_aluno`,
ADD COLUMN `data_nascimento` DATE NOT NULL AFTER `nome`,
ADD COLUMN `endereco` VARCHAR(255) NOT NULL AFTER `data_nascimento`,
ADD COLUMN `cidade` VARCHAR(100) NOT NULL AFTER `endereco`,
ADD COLUMN `estado` VARCHAR(2) NOT NULL AFTER `cidade`,
ADD COLUMN `cpf` VARCHAR(11) NOT NULL AFTER `estado`;
Como podemos observar para adicionar colunas eu coloco o comando seguido do nome da coluna, o tipo de dados que seram inclusos nessa coluna e a posição na qual ela será adicionada.

Para apagar tabelas:
DROP TABLE escola_curso.alunos;

Para inserir dados na tabela seguimos a seguinte sintaxe:
INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...)
Ex:
INSERT INTO escola_curso.alunos //Note que nesse caso eu não passei o nome de cada coluna pois todas são 				obrigatórias e portanto todas serão preenchidas
VALUES (DEFAULT, 'Rafael Cavalcante', 'Av. Remo Oscar Beseggio, 565', 'Valinhos', 'SP', '12345678911');
No caso o primeiro valor é colocado com DEFAULT por se tratar so ID que por sí só é auto-incremental, logo possui o valor DEFAULT do ID anterior somado 1.

Para alterar os dados de uma tabela seguimos a seguinte sintaxe:
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
Ex:
UPDATE escola_curso.alunos
SET nome = 'Rafael Cavalcante da Silva'
WHERE id_aluno = 1;
Nesse exemplo ele irá alterar o dado presente na coluna nome, onde o id do registro for 1 para Rafael Cavalcante da Silva

Para deletar registros de uma tabela seguimos a seguinte sitaxe:
DELETE FROM table_name
WHERE condition;
Ex:
DELETE FROM escola_curso.alunos
WHERE id_aluno = 1;

Para realizar buscas no DB utilizamos a seguinte sintaxe:
SELECT column1, column2, column3, ...
FROM nome_da_tabela
Ex:
SELECT cidade, data_nascimento, cpf
FROM escola_curso
Nesse exemplo o banco de dados retornará essas colunas, caso queira que ele retorne todas as colunas basta escrever:
SELECT * FROM escola_curso

Para filtrar os registros os quais queremos que sejam retornados podemos usar a seguinte sintaxe:
SELECT column1, column2, column3, ...
FROM nome_da_tabela
WHERE condição
Ex:
SELECT cidade, data_nascimento, cpf
FROM escola_curso;
WHERE cidade = 'Belo Horizonte'
Nesse caso ele retornará as três colunas porém somente as que se referem a pessoas cuja cidade está cadastrada como Belo Horizonte.

É possível ordenar o resultado da busca com base em colunas específicas sguindo a sintaxe:
SELECT column1, column2, column3, ...
FROM nome_da_tabela
ORDER BY column1
Ex:
SELECT * FROM world.city ORDER BY Name
Nesse caso o retorno será de todos as cidades contidas na tabela e organizadas por ordem alfabética tomando como referência a coluna Name

É possível utilizar de operadores lógicos nas condições após o WHERE. Ex:
SELECT * FROM escola_curso.alunos WHERE id_aluno = 2 or id_aluno = 5
Nesse caso ambos os alunos de id 2 e 5 serão retornados, mas caso um deles tenha sido deletado o outro ainda será retornado normalmente.
Ex2:
SELECT * FROM escola_curso.alunos WHERE id_aluno = 2 and id_aluno = 5
Nesse caso não haverá retorno algum, pois não há nenhum registro que possua o id 2 e 5 ao mesmo tempo
Ex3:
SELECT * FROM escola_curso.alunos WHERE cidade = 'Belo Horizonte' and estado = 'MG'
Nesse caso serão retornados todos os alunos que moram em Belo Horizonte no Estado de MG

Semelhante aos operadores lógicos podemos também utilizar dos operadores relacionais (>, <, >=, <=, =, <>). Ex:
SELECT * FROM escola_curso.alunos WHERE data_nascimento >= '1990-01-01'
Nesse caso será retornado todos que nasceram nessa exata data ou após ela.